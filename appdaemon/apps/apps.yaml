# AppDaemon Apps Configuration for Crop Steering System
# ====================================================

# Smart Irrigation Learning System
# Main learning system that characterizes zones and optimizes irrigation
smart_irrigation_learning:
  module: smart_irrigation_learning
  class: SmartIrrigationLearning
  
  # System Configuration - ADJUST FOR YOUR SETUP
  zones: [1, 2, 3, 4, 5, 6]  # Active zones in your system
  dripper_rate: 1.2           # L/hr per pressure-compensating dripper
  drippers_per_plant: 2       # Number of drippers per plant
  plants_per_zone: 4          # Number of plants per zone
  substrate_volume: 3.0       # Liters of substrate per plant
  
  # Learning Parameters (Advanced - leave defaults unless experienced)
  field_capacity_efficiency_threshold: 0.3   # 30% efficiency = field capacity
  min_efficiency_for_good_absorption: 0.7    # 70% = good absorption
  shot_test_duration: 30                     # seconds for test shots
  absorption_wait_time: 120                  # seconds to wait after irrigation

# Learning Dashboard Helper
# Creates Home Assistant entities and services for monitoring learning progress
learning_dashboard:
  module: learning_dashboard
  class: LearningDashboard

# Original Master Crop Steering Application (Optional - can run alongside)
# Uncomment if you want to keep existing automation running
# master_crop_steering:
#   module: crop_steering.master_crop_steering_app
#   class: MasterCropSteeringApp
#   log: crop_steering_master
#   log_level: INFO

# Advanced Dashboard Application  
# Provides real-time Athena-style monitoring and analytics
# DISABLED: Requires plotly/pandas dependencies not available in AppDaemon
# crop_steering_dashboard:
#   module: crop_steering.advanced_crop_steering_dashboard
#   class: AdvancedCropSteeringDashboard
#   log: crop_steering_dashboard
#   log_level: INFO

# Individual Advanced Modules (Optional - included in master app)
# These can be enabled for standalone testing or modular operation

# Dryback Detection Module
# dryback_detector:
#   module: crop_steering.advanced_dryback_detection
#   class: AdvancedDrybackDetector
#   log: crop_steering_dryback
#   log_level: DEBUG

# Sensor Fusion Module  
# sensor_fusion:
#   module: crop_steering.intelligent_sensor_fusion
#   class: IntelligentSensorFusion
#   log: crop_steering_fusion
#   log_level: DEBUG

# ML Prediction Module
# ml_predictor:
#   module: crop_steering.ml_irrigation_predictor
#   class: SimplifiedIrrigationPredictor
#   log: crop_steering_ml
#   log_level: DEBUG

# Crop Profiles Module
# crop_profiles:
#   module: crop_steering.intelligent_crop_profiles
#   class: IntelligentCropProfiles
#   log: crop_steering_profiles
#   log_level: DEBUG

# Global Python modules (deprecated but required for compatibility)
# Individual apps will import these locally instead
#global_modules:
#  - requests
#  - numpy  
#  - pandas
#  - plotly
#  - scipy

# Global configuration
# All modules read from crop_steering.env file for hardware configuration